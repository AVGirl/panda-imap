/*
 * TCP/IP String IOT routines - Macintosh version
 *
 * Mark Crispin, SUMEX Computer Project, 18 August 1988
 *
 * Copyright (c) 1988 Stanford University
 *
 */
 
#include <types.h>
#include <tcpio.h>
#include "tcpsio.h"
#include "misc.h"

#define BUFLEN 8192

typedef struct tcp_stream {
  char *host;			/* host name */
  STREAM *tstream;		/* TCPIO's stream */
  char ibuf[BUFLEN];		/* input buffer */
} TCPSTREAM;



/* TCP/IP open
 * Accepts: host name
 *	    contact port number
 * Returns: TCP stream if success else NIL
 */

TCPSTREAM *tcp_open (host,port)
    char *host;
    int port;
{
  char tmp[1024];
  TCPSTREAM *stream;
  STREAM *tstream;
  ip_addr hostaddr;
  char *hostname;
  if (!(hostaddr = tcpnametoaddr (host,&hostname))) {
    sprintf (tmp,"No such host as %s",host);
    usrlog (tmp);
    return (NIL);
  }
  if ((tcpopen (&tstream,hostaddr,port,30)) != noErr) {
    sprintf (tmp,"Can't connect to %s,%d server",host,port);
    usrlog (tmp);
    return (NIL);
  }
				/* create TCP/IP stream */
  stream = (TCPSTREAM *) malloc (sizeof (TCPSTREAM));
  stream->tstream = tstream;	/* init TCPIO's stream */
				/* copy official host name */
  stream->host = malloc (1+strlen (hostname));
  strcpy (stream->host,hostname);
  return (stream);
}


/* TCP/IP receive line
 * Accepts: TCP/IP stream
 * Returns: text line string or NIL if failure
 */

char *tcp_getline (stream)
     TCPSTREAM *stream;
{
  int n;
  char *st;
  if (!stream->tstream) return (NIL);
  if ((n = tcp_line_read (stream->tstream,stream->ibuf,BUFLEN,NIL,"\012",0,T))
       < 0) return ((char *) tcp_punt (stream));
    				/* handle case of blank line */
  if (n <= 2) return (tcp_getline (stream));
  st = malloc (n-1);		/* copy into a free storage string */
  memcpy (st,stream->ibuf,n-2);
  st[n-2] = '\0';		/* tie off string with null */
  return (st);
}


/* TCP/IP receive buffer
 * Accepts: TCP/IP stream
 *	    size in bytes
 *	    buffer to read into
 * Returns: T if success, NIL otherwise
 */

tcp_getbuffer (stream,size,buffer)
     TCPSTREAM *stream;
     int size;
     char *buffer;
{
  if (!stream->tstream) return (NIL);
				/* read size bytes into buffer from TCP */
  if ((tcpread (stream->tstream,buffer,-size,NIL,0,T)) < 0)
    return (tcp_punt (stream));
  buffer[size] = '\0';		/* tie off text */
  return (T);
}


/* TCP/IP send string as record
 * Accepts: TCP/IP stream
 * Returns: T if success else NIL
 */

tcp_soutr (stream,string)
    TCPSTREAM *stream;
    char *string;
{
  if (!stream->tstream) return (NIL);
				/* write to TCP, wait until done */
  if ((tcpwrite (stream->tstream,string,strlen (string),TCPPUSH,30,T)) != noErr)
    return (tcp_punt (stream));
  return (T);
}


/* TCP/IP close
 * Accepts: TCP/IP stream
 */

tcp_close (stream)
    TCPSTREAM *stream;
{
  				/* close the connection */
  if (stream->tstream) tcpclose (stream->tstream,30,T);
  free (stream->host);		/* flush host names */
  free (stream);		/* flush the stream */
}


/* TCP/IP punt
 * Accepts: TCP/IP stream
 */

tcp_punt (stream)
    TCPSTREAM *stream;
{
  char tmp[1024];		/* give error to user */
  sprintf (tmp,"TCP error: %s",stream->tstream->tcperror);
  usrlog (tmp);
				/* tell TCP to go away */
  tcpclose (stream->tstream,2,T);
  stream->tstream = NIL;	/* flush tstream so future callers fail */
  return (NIL);
}


/* TCP/IP return host for this stream
 * Accepts: TCP/IP stream
 * Returns: host name for this stream
 */

char *tcp_host (stream)
    TCPSTREAM *stream;
{
  return (stream->host);	/* return host name */
}


/* TCP/IP return local host for this stream
 * Accepts: TCP/IP stream
 * Returns: local host name for this stream
 */

char *tcp_localhost (stream)
    TCPSTREAM *stream;
{
				/* return local host name */
  return (tcplocalhost (stream->tstream));
}
